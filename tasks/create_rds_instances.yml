---

- name: Gather facts about the {{role_type}} RDS Subnets in {{env}}
  ec2_vpc_subnet_facts:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    filters:
      "tag:Environment": "{{env}}"
      "tag:Role": "{{role_type}}_rds"
  register: rds_subnets

- debug:
    var: rds_subnets
    verbosity: 2

- name: Gather facts about the {{role_type}} RDS Security Groups in {{env}}
  ec2_group_facts:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    filters:
      "tag:Environment": "{{env}}"
      "tag:Role": "{{role_type}}_rds"
      "tag:Name" : "xvt-{{vpc_name}}-sg-{{role_type}}-rds"
  register: rds_security_groups

- fail: msg="Not found any security group xvt-{{vpc_name}}-sg-{{role_type}}-rds"
  when: rds_security_groups.groups|length == 0

- debug:
    msg: "{{rds_security_groups.groups | map(attribute='GroupId') | list}}"
    verbosity: 2

- name: set the security group list fact
  set_fact:
    vpc_security_group_ids: "{{rds_security_groups.groups | map(attribute='GroupId') | list}}"

- debug:
    msg: "List of rds_security_groups found {{ vpc_security_group_ids}}"
    verbosity: 2

- debug:
    msg: "subnet_groups from variables {{item.value.name}}"
    verbosity: 2
  with_dict: "{{ rds[role_type].subnet_groups }}"
# If existing subnet group having different vpc-id then the below will fail
# with message 'The new Subnets are not in the same Vpc as the existing subnet
# group'. Reason is aws does not allow to edit/change the vpcid.
# To fix, use the aws console and manually delete these rds subnet group and
# re-run ansible again.
- name: create the rds_subnet_group
  rds_subnet_group:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    name: "{{ item.value.name }}"
    description: "{{ item.value.description }}"
    subnets: "{{ rds_subnets.subnets | map(attribute='id') |list }}"
    state: present
  with_dict: "{{ rds[role_type].subnet_groups }}"
  register: rds_subnet_group

- debug:
    msg: "{{rds_subnet_group.results[0].item.value.name}}"
    verbosity: 2

- name: set the db_subnet_group_name fact
  set_fact:
    db_subnet_group_name: "{{rds_subnet_group.results[0].item.value.name}}"

- name: create the parameter_group
  rds_param_group:
    region: "{{region}}"
    profile: "{{ aws_account_name }}"
    name: "{{ item.value.name }}"
    description: "{{ item.value.description }}"
    params: "{{ item.value.params }}"
    engine: "{{ rds[role_type].option_groups.engine_name }}{{ rds[role_type].option_groups.major_engine_version }}"
    state: present
  with_dict: "{{ rds[role_type].parameter_groups }}"
  register: rds_param_group

- debug:
    msg: "{{rds_param_group.results[0].item.value.name}}"
    verbosity: 2

- name: set the parameter_group_name fact
  set_fact:
    db_parameter_group_name: "{{rds_param_group.results[0].item.value.name}}"

- name: create the option_group_name
  rds_option_group:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    option_group_name: "{{ item.option_group_name }}"
    engine_name: "{{ item.engine_name }}"
    major_engine_version: "{{ item.major_engine_version }}"
    option_group_description: "{{ item.option_group_description }}"
    apply_immediately: "{{ item.apply_immediately }}"
    state: present
  with_items:
    - "{{ rds[role_type].option_groups }}"
  register: rds_option_group

- debug:
    msg: "{{rds_option_group.results[0].item.option_group_name}}"
    verbosity: 2

- name: set the option_group_name fact
  set_fact:
    option_group_name: "{{ rds_option_group.results[0].item.option_group_name }}"

- rds_facts:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    instance_name: "{{ item.value.db_instance_identifier }}"
  with_dict: "{{ rds[role_type].db_instances }}"

- name: Create the {{role_type}}-{{ db_instance_type }} RDS instance
  rds_instance:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    instance_name: "{{ item.value.db_instance_identifier }}"
    db_engine: "{{ item.value.engine }}"
    engine_version: "{{ rds[role_type].option_groups.major_engine_version }}"
    instance_type: "{{ item.value.db_instance_class}}"
    username: "{{ item.value.master_username }}"
    password: "{{ item.value.master_user_password }}"
    size: "{{ item.value.allocated_storage }}"
    storage_type: "{{ item.value.storage_type }}"
    # It works but only if we do the whole rebuild of rds for all env to match
    # up the engine version. Commented out for now until we have a chance to
    # rebuild all from scratch to have consistent rds version in engine and
    # param group.
    parameter_group: "{{ db_parameter_group_name  }}"
    option_group: "{{ option_group_name }}"
    vpc_security_groups: "{{ vpc_security_group_ids }}"
    subnet: "{{ db_subnet_group_name }}"
    tags: "{{ item.value.tags }}"
    multi_zone: "{{ item.value.multi_az }}"
    wait: "{{ item.value.wait }}"
    wait_timeout: "{{ item.value.wait_timeout }}"
  with_dict: "{{ rds[role_type].db_instances }}"
  register: master_rds_instance
  when: "db_instance_type  == 'master'"

- name: Create Route 53 internal rds master record entry for {{role_type}}
  route53:
    profile: "{{ aws_account_name }}"
    private_zone: true
    command: create
    zone: "{{ env }}.{{ tld_name_internal }}"
    record: "{{ role_type }}-{{ db_instance_type }}.{{env}}.{{ tld_name_internal }}"
    value: "{{ master_rds_instance.instance.endpoint }}"
    type: CNAME
    ttl: 300
    overwrite: yes
    retry_interval: 5
