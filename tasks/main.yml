---

- name: Gather facts about the {{role_type}} RDS Subnets in {{env}}
  ec2_vpc_subnet_facts:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    filters:
      "tag:Environment": "{{env}}"
      "tag:Role": "{{role_type}}_rds"
  register: rds_subnets

- debug: msg="{{rds_subnets}}"
  when: activate_debug|bool

- name: Gather facts about the {{role_type}} RDS Security Groups in {{env}}
  ec2_group_facts:
    filters:
      "tag:Environment": "{{env}}"
      "tag:Role": "{{role_type}}_rds"
      "tag:Name" : "xvt-{{vpc_name}}-{{role_type}}-rds"
  register: rds_security_groups

- debug: msg="{{rds_security_groups.groups | map(attribute='GroupId') | list}}"
  when: activate_debug|bool  

- name: set the security group list fact
  set_fact:
    vpc_security_group_ids: "{{rds_security_groups.groups | map(attribute='GroupId') | list}}"


- debug: msg="{{item.value.name}}"
  with_dict: "{{ rds[env][role_type].subnet_groups }}"

- name: create the rds_subnet_group
  rds_subnet_group:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    name: "{{ item.value.name }}"
    description: "{{ item.value.description }}"
    subnets: "{{ rds_subnets.subnets | map(attribute='id') |list }}"
    state: present
  with_dict: "{{ rds[env][role_type].subnet_groups }}"
  register: rds_subnet_group

- debug: msg="{{rds_subnet_group.results[0].item.value.name}}"
  when: activate_debug|bool  

- name: set the db_subnet_group_name fact
  set_fact:
    db_subnet_group_name: "{{rds_subnet_group.results[0].item.value.name}}"

# - name: create the parameter_group
#   rds_param_group:
#     name: "{{ item.value.name }}"
#     description: "{{ item.value.description }}"
#     engine: "{{ item.value.engine }}"
#     params: "{{ item.value.params }}"
#     state: present    
#   with_dict: "{{ rds[env][role_type].parameter_groups }}"    
#   register: rds_param_group

# - debug: msg="{{rds_param_group.results[0].item.value.name}}"
#   when: activate_debug|bool    

# - name: set the parameter_group_name fact
#   set_fact:
#     db_parameter_group_name: "{{rds_param_group.results[0].item.value.name}}"

- name: create the option_group_name
  rds_option_group:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    option_group_name: "{{ item.value.option_group_name }}"
    engine_name: "{{ item.value.engine_name }}"
    major_engine_version: "{{ item.value.major_engine_version }}"
    option_group_description: "{{ item.value.option_group_description }}"
    apply_immediately: "{{ item.value.apply_immediately }}"
    state: present
  with_dict: "{{ rds[env][role_type].option_groups }}"
  register: rds_option_group

- debug: msg="{{rds_option_group.results[0].item.value.option_group_name }}"
  when: activate_debug|bool    

- name: set the option_group_name fact
  set_fact:
    option_group_name: "{{rds_option_group.results[0].item.value.option_group_name }}"

- name: Create an RDS instance
  rds_v2:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    command: create
    db_instance_identifier: "{{ item.value.db_instance_identifier }}"
    engine: "{{ item.value.engine }}"
    db_instance_class: "{{ item.value.db_instance_class}}"
    master_username: "{{ item.value.master_username }}"
    master_user_password: "{{ item.value.master_user_password }}"
    allocated_storage: "{{ item.value.allocated_storage }}"
    # db_parameter_group_name: "{{ db_parameter_group_name  }}"
    option_group_name: "{{ option_group_name }}"
    # Must be an array
    vpc_security_group_ids: "{{ vpc_security_group_ids }}"  
    db_subnet_group_name: "{{ db_subnet_group_name }}"
    tags: "{{ item.value.tags }}"
    wait: "{{ item.value.wait }}"
    wait_timeout: "{{ item.value.wait_timeout }}"
  with_dict: "{{ rds[env][role_type].db_instances }}"
  register: master_rds_instance


- name: "Return RDS facts for tagged instance"
  rds_facts:
    region: "{{region}}"
    profile: "{{aws_account_name}}"
    filters: 
       'tag:Name': "{{ vpc_name }}-{{role_type}}-rds-master"
       'tag:Environment': "{{env}}"
  register: rds_master

- debug: msg="{{ rds_master.rds}}"

- name: set rds fact
  set_fact:
    rds:
      endpoint: "{{rds_master.rds.endpoint}}"
      port: "{{rds_master.rds.port}}"

- debug: msg="{{ hostvars['localhost']}}"
- debug: msg="{{ hostvars['localhost'].rds}}"

# - name: Create Route 53 internal rds master record entry for {{role_type}}
#   route53:
#     profile: "{{ aws_account_name }}"
#     private_zone: true
#     command: create
#     zone: "{{ env }}.{{ tld_name_internal }}"
#     record: "{{ elb_dns_record }}.{{env}}.{{ tld_name_internal }}"
#     value: "{{ newly_created_elb.elb.dns_name }}"
#     type: CNAME
#     ttl: 300
#     overwrite: yes
#     retry_interval: 5
#   when: stage != "delete"

# - name: create an RDS instance replica
#   rds_v2:
#     region: "{{ region }}"
#     profile: "{{ aws_account_name }}"
#     command: replicate
#     source_db_instance_identifier: test-instance    
#     db_instance_identifier: test-instance-read-replica
#     availability_zone: ap-southeast-2a
#     db_instance_class: db.t2.medium
#     option_group_name: test-option-group
#     tags: "{{ rds[env].db_instances[role_type].replica1.tags }}"
#     wait: "{{ rds[env].db_instances[role_type].master.wait }}"
#     wait_timeout: "{{ rds[env].db_instances[role_type].master.wait_timeout }}"
#   with_items: "{{ rds[env].db_instances[role_type] }}"
#   when: "{{ item.command == 'replicate' }}"    
#   register: new_rds_replica  

