---

- name: Gather facts about the {{role_type}} RDS Subnets in {{env}}
  ec2_vpc_subnet_facts:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    filters:
      "tag:Environment": "{{env}}"
      "tag:Role": "{{role_type}}_rds"
  register: rds_subnets

- debug: msg="{{rds_subnets}}"
  when: activate_debug|bool

- name: Gather facts about the {{role_type}} RDS Security Groups in {{env}}
  ec2_group_facts:
    filters:
      "tag:Environment": "{{env}}"
      "tag:Role": "{{role_type}}_rds"
      "tag:Name" : "xvt-{{vpc_name}}-{{role_type}}-rds"
  register: rds_security_groups

- debug: msg="{{rds_security_groups}}"
  when: activate_debug|bool  

# - debug: msg="{{item.value.name}}"
#   with_dict: "{{ rds[env].subnet_groups[role_type]}}"

# - fail: msg="Stopping"

- name: create the rds_subnet_group
  rds_subnet_group:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    name: "{{ item.value.name }}"
    description: "{{ item.value.description }}"
    subnets: "{{ rds_subnets.subnets | map(attribute='id') |list }}"
    state: present
  with_dict: "{{ rds[env].subnet_groups[role_type]}}"
  register: rds_subnet_group

- debug: msg="{{rds_subnet_group}}"
  when: activate_debug|bool  

- name: create the parameter_group
  rds_param_group:
    name: "{{ item.value.name }}"
    description: "{{ item.value.description }}"
    engine: "{{ item.value.engine }}"
    params: "{{ item.value.params }}"
    state: present    
  with_dict: "{{ rds[env].parameter_groups[role_type] }}"    
  register: rds_param_group

- debug: msg="{{rds_param_group}}"
  when: activate_debug|bool    

- name: create the option_group
  rds_option_group:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    option_group_name: "{{ item.value.option_group_name }}"
    engine_name: "{{ item.value.engine_name }}"
    major_engine_version: "{{ item.value.major_engine_version }}"
    option_group_description: "{{ item.value.option_group_description }}"
    apply_immediately: "{{ item.value.apply_immediately }}"
    state: present
  with_dict: "{{ rds[env].option_groups[role_type] }}"
  register: rds_option_group

- debug: msg="{{rds_option_group}}"
  when: activate_debug|bool    

- fail: msg="Stopping"

# - name: Create an RDS instance
#   rds_v2:
#     region: "{{ region }}"
#     profile: "{{ aws_account_name }}"
#     command: create
#     db_instance_identifier: "{{ item.db_instance_identifier }}"
#     engine: "{{ item.master.engine }}"
#     db_instance_class: "{{ item.db_instance_class}}"
#     master_username: "{{ item.master_username }}"
#     master_user_password: "{{ item.master_user_password }}"
#     allocated_storage: "{{ item.allocated_storage }}"
#     db_parameter_group_name: "{{  }}"
#     option_group_name: "{{  }}"
#     # Must be an array
#     vpc_security_group_ids: "{{  }}"  
#     db_subnet_group_name: "{{ }}"
#     tags: "{{ item.tags }}"
#     wait: "{{ item.wait }}"
#     wait_timeout: "{{ item.wait_timeout }}"
#   with_items: "{{ rds[env].db_instances[role_type] }}"
#   when: "{{ item.command == 'create' }}"
#   register: new_rds_instance  


# - name: create an RDS instance replica
#   rds_v2:
#     region: "{{ region }}"
#     profile: "{{ aws_account_name }}"
#     command: replicate
#     source_db_instance_identifier: test-instance    
#     db_instance_identifier: test-instance-read-replica
#     availability_zone: ap-southeast-2a
#     db_instance_class: db.t2.medium
#     option_group_name: test-option-group
#     tags: "{{ rds[env].db_instances[role_type].replica1.tags }}"
#     wait: "{{ rds[env].db_instances[role_type].master.wait }}"
#     wait_timeout: "{{ rds[env].db_instances[role_type].master.wait_timeout }}"
#   with_items: "{{ rds[env].db_instances[role_type] }}"
#   when: "{{ item.command == 'replicate' }}"    
#   register: new_rds_replica  

